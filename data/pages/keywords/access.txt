====== ACCESS ======
/* Remove the comments after creating content for each section.*/

Usually combined with [[OPEN]] or [[ASK]], sets or returns the access mode users have to an open file.

/*
  For the lines below, just create links, separated by commas, to other pages of the BASICs section,
  like [[:basics:basicTagName]].
  
  "Implemented by" should mention BASICs which implement the keyword like described, in a more usual and standard way.
  
  "With variations" should point to BASICs where this keyword is used a bit differently.
  
  "Also written as" should list alternative spellings and abbreviations this keyword has. No need to
  refer to a BASIC, there is a section for that later.
*/

**Implemented by:** [[:basics:ANSI:ansifull]], [[:basics:msqb:QBasic]], [[:basics:VBDOS:]], [[:basics:FreeBASIC:]]

**With variations:** [[:basics:Gambas:]] (as a function)

**Also written as: ** 

===== Usage =====
/* For inline examples of syntax, write the keyword between '' and '' (two single quotes) */

In the [[:basics:msqb:|MS-QuickBASIC]] family, [[:basics:VBDOS:]] and [[:basics:FreeBASIC:]], ACCESS is part of an [[OPEN]] statement with a network-shared file. 

  OPEN filepath$ FOR INPUT ACCESS READ AS #1

The [[:basics:ANSI:ansifull|ANSI Standard "Full" BASIC specification]] shows ACCESS as one of the possible arguments for [[OPEN]] and [[ASK]] in the so-called "file operations" (section 11.1). The values it could take or return would be the strings [[INPUT]], [[OUTPUT]] and [[OUTIN]]. If used with ASK, ACCEPT should be followed by a string variable name, which would be loaded with the return value.

<code qbasic>
OPEN #1: NAME "anyfile.txt", ACCESS INPUT, ORGANIZATION SEQUENTIAL

ASK #1: ACCESS A$
PRINT A$
</code>


==== Variations ====

[[:basics:Gambas:]] implements ACCESS purely as a boolean function that returns TRUE if the given filepath can be acessed by the application/user in an optionally given //mode// in the form of a constant from the ''gb'' class (''gb.Read'' if ommited):

<code gambas>
Print Access ("/root", gb.Write)  ' FALSE
</code>

===== Examples =====
/*
  Below is an example of a code block, using GeSHi syntax highlighting for //gwbasic//. Other styles of interest might be
  //basic4gl//, //blitzbasic//, //freebasic//, //gambas//, //locobasic//, //purebasic//, //qbasic//, //sdlbasic//,
  //thinbasic//, //vb//, //vbnet//, //xbasic// or //zxbasic//. 

  <code gwbasic>
  10 PRINT "HELLO"
  </code>
*/



===== Comments =====
/* Origin of the keyword, opinions, history... */


===== Related keywords =====
/* Keywords that are often or always used along this one */
  * [[OPEN]]
  * [[ASK]]

===== Similar keywords =====
/* Keywords with the same or similar functionality found in other versions of BASIC */


===== In other languages... =====
/* For parallels and comparisons with other modern-day languages */


===== References =====
/* If you used the ((citation)) syntax elsewhere in the text, they will appear under this section. But you can write some recommendations of books, magazines, etc */

/*
  ===== TAGS =====
  Please use the syntax below for adding tags to this page, separated by spaces (use quotes for tags with spaces).
  The most important tags to be used are, separated by groups:
    - Statements | Commands | SpecialVariables | Operators
  
  {{tag>tagName}}
*/
{{tag>Functions Modifiers Files}}